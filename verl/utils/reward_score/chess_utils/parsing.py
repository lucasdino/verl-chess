import re
import ast


def extract_solution(text: str) -> str:
    """ Extracts text between <answer> and </answer> tags, trims it, and returns it. """

    matches = re.findall(r"<answer>(.*?)</answer>", text, re.DOTALL)
    if not matches:
        raise ValueError("No <answer> tags found.")
    extracted = matches[-1].strip()
    return extracted

def _stringify_move(move: str) -> str:
    return ''.join(c for c in move if c.isalnum())    

def _coerce_string_list(items: list[str]) -> list[str]:
    pattern = re.compile(r'^[a-zA-Z]\d(?:[a-zA-Z]\d)?$')
    filtered = [item for item in items if pattern.match(item)]
    
    if not filtered:
        raise ValueError("No valid items found in input.")
    
    return filtered

def coerce_response(text: str, task_type: str) -> str:
    """ Given an output generated by an LLM, coerces it to be in a more workable format. """
    try:
        processed_text = ast.literal_eval(text)
    except:
        processed_text = text

    if task_type == 'choose_from_n' or task_type == 'predict_singlemove' or task_type == 'predict_in_list':
        # Need output to be a single string (no list)
        if isinstance(processed_text, str):
            processed_text = _stringify_move(processed_text)
        elif isinstance(processed_text, list):
            if len(processed_text) == 1:
                processed_text = _stringify_move(processed_text[0])
            elif len(processed_text) > 1:
                raise ValueError("Output is a list with multiple elements.")
        else:
            raise ValueError("Output is not in the correct format.") 
    elif task_type == 'produce_list':
        # Need to coerce to a list of strings
        if isinstance(processed_text, list):
            # Process each element to ensure all elements are strings
            processed_text = [_stringify_move(x) for x in processed_text]
        elif isinstance(processed_text, str):
            processed_text = re.split(r'[\s,]+', processed_text.strip()) if processed_text.strip() else []
            processed_text = _coerce_string_list(processed_text)
        else:
            raise ValueError("Output is not a list.")
    else:
        raise ValueError(f"Unknown eval type: {task_type}")

    return processed_text